import asyncio
import os
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, FloodWaitError
from telethon.tl.types import InputPeerChannel, MessageMediaPhoto, MessageMediaDocument, MessageMediaWebPage
from telethon.tl.types import MessageEntityMention, MessageEntityUrl, MessageEntityTextUrl
import time
from config import *
from logger_utils import setup_logging, log_message_info, log_final_stats

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_RETRIES = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

# –°–µ—Å—Å–∏—è (—Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏)
session_name = 'cloner_session'

async def copy_message_with_media(client, message, target, media_folder):
    """
    –ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    max_retries = MAX_RETRIES
    
    for attempt in range(max_retries):
        try:
            text = message.text or ""
            media_file = None
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –º–µ–¥–∏–∞
            if not text and not message.media:
                print(f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return False, None
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
            if message.media and DOWNLOAD_MEDIA:
                try:
                    if isinstance(message.media, MessageMediaPhoto):
                        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                        media_file = await client.download_media(message, file=media_folder)
                        
                    elif isinstance(message.media, MessageMediaDocument):
                        # –î–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, —Å—Ç–∏–∫–µ—Ä—ã, –≥–∏—Ñ–∫–∏ - —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                        media_file = await client.download_media(message, file=media_folder)
                            
                    elif isinstance(message.media, MessageMediaWebPage):
                        # –í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –ø—Ä–µ–≤—å—é
                        media_file = None
                except Exception as e:
                    print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(2)
                        continue
                    media_file = None
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞
            if media_file and len(text) > 1024:
                text = text[:1020] + "..."
                print(f"\n‚úÇÔ∏è –¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–µ–¥–∏–∞")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_params = {
                'entity': target,
                'link_preview': False,
                'parse_mode': None
            }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if text:
                send_params['message'] = text
            elif media_file:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–æ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                send_params['message'] = ""
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –º–µ–¥–∏–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                print(f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                return False, None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            if media_file:
                send_params['file'] = media_file
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if PRESERVE_FORMATTING and message.entities:
                send_params['formatting_entities'] = message.entities
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await client.send_message(**send_params)
            
            # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –º–µ—Å—Ç–æ
            if media_file and isinstance(media_file, str) and os.path.exists(media_file):
                try:
                    os.remove(media_file)
                    print(f"\nüóëÔ∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {os.path.basename(media_file)}")
                except Exception as e:
                    print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {media_file}: {e}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if sent_message:
                print(f"\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{sent_message.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {target.title}")
                return True, media_file
            else:
                print(f"\n‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return False, None
            
        except FloodWaitError as e:
            print(f"\n‚è≥ –§–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
            continue
            
        except Exception as e:
            error_msg = str(e)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            if "You can't forward messages from a protected chat" in error_msg:
                print(f"\nüîí –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∑–∞—â–∏—â–µ–Ω –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                try:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–∫–∞—á–∞–Ω
                    if 'media_file' in locals() and media_file and isinstance(media_file, str) and os.path.exists(media_file):
                        os.remove(media_file)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –º–µ–¥–∏–∞
                    if text:
                        text_params = {
                            'entity': target,
                            'message': text,
                            'link_preview': False,
                            'parse_mode': None
                        }
                        if PRESERVE_FORMATTING and message.entities:
                            text_params['formatting_entities'] = message.entities
                        
                        sent_message = await client.send_message(**text_params)
                        if sent_message:
                            print(f"\n‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–º–µ–¥–∏–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ)")
                            return True, None
                except Exception as text_error:
                    print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {text_error}")
                
                return False, None
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π
            elif "The caption is too long" in error_msg:
                print(f"\n‚úÇÔ∏è –ü–æ–¥–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ")
                try:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–∫–∞—á–∞–Ω
                    if 'media_file' in locals() and media_file and isinstance(media_file, str) and os.path.exists(media_file):
                        os.remove(media_file)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                    if text:
                        text_params = {
                            'entity': target,
                            'message': text,
                            'link_preview': False,
                            'parse_mode': None
                        }
                        if PRESERVE_FORMATTING and message.entities:
                            text_params['formatting_entities'] = message.entities
                        
                        sent_message = await client.send_message(**text_params)
                        if sent_message:
                            print(f"\n‚úÖ –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ")
                            return True, None
                except Exception as text_error:
                    print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {text_error}")
                
                return False, None
            
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if 'media_file' in locals() and media_file and isinstance(media_file, str) and os.path.exists(media_file):
                try:
                    os.remove(media_file)
                except:
                    pass
            if attempt < max_retries - 1:
                await asyncio.sleep(3)
                continue
            return False, None
    
    print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    return False, None

async def get_channel_info(client, channel_link):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    """
    try:
        entity = await client.get_entity(channel_link)
        total_messages = 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        async for _ in client.iter_messages(entity, limit=None):
            total_messages += 1
            
        return entity, total_messages
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
        return None, 0

async def find_message_by_text(client, source_entity, search_text, limit=10000):
    """–ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É —Ç–µ–∫—Å—Ç–∞ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (position, message). Position = –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ—Ç 1 (—Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ)."""
    print(f"\nüîç –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: '{search_text[:50]}...'")
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –≤ —Å–ø–∏—Å–æ–∫ –¥–æ –ª–∏–º–∏—Ç–∞
    collected = []
    async for m in client.iter_messages(source_entity, limit=limit):
        collected.append(m)
    # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á—Ç–æ–±—ã –∏–¥—Ç–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
    collected.reverse()
    for idx, message in enumerate(collected, start=1):
        if message.text and search_text in message.text:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {idx} (ID={message.id})")
            print(f"üìù –¢–µ–∫—Å—Ç: {message.text[:120]}...")
            return idx, message
        if idx % 100 == 0:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {idx} —Å–æ–æ–±—â–µ–Ω–∏–π...")
    print(f"\n‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ {len(collected)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
    return None, None

async def main():
    client = TelegramClient(session_name, API_ID, API_HASH)

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await client.start(phone=PHONE)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        print("üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ...")
        source, total_messages = await get_channel_info(client, SOURCE_CHANNEL)
        if not source:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É")
            return
            
        print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {source.title}")
        print(f"üìà –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ: {total_messages}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger = setup_logging(source.title.replace(' ', '_'))
        logger.info(f"–ù–∞—á–∞–ª–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {source.title}")
        logger.info(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {total_messages}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        if not DEMO_MODE:
            print("üéØ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É...")
            target, _ = await get_channel_info(client, TARGET_CHANNEL)
            if not target:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É")
                return
                
            print(f"üìù –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {target.title}")
            logger.info(f"–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {target.title}")
        else:
            print("üîç –î–ï–ú–û –†–ï–ñ–ò–ú: –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            logger.info("–î–ï–ú–û –†–ï–ñ–ò–ú: –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            target = None

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Windows
        safe_name = source.title.replace(' ', '_').replace(':', '').replace('!', '').replace('?', '').replace('/', '').replace('\\', '')
        media_folder = f"{MEDIA_FOLDER_PREFIX}{safe_name}"
        if not os.path.exists(media_folder):
            os.makedirs(media_folder)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –º–µ–¥–∏–∞: {media_folder}")
        logger.info(f"–ü–∞–ø–∫–∞ –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {media_folder}")

        # –§–∞–π–ª –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_file_path = f"progress_{safe_name}.log"
        print(f"üìù –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤: {progress_file_path}")
        logger.info(f"–§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {progress_file_path}")

        def build_source_message_link(src_entity_id: int, msg_id: int) -> str:
            """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –≤–∏–¥–∞ https://t.me/c/<internal>/<message_id> –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
            ID –∫–∞–Ω–∞–ª–∞ –≤ —Å—Å—ã–ª–∫–µ = channel_id –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ -100.
            """
            sid = str(src_entity_id)
            if sid.startswith('-100'):
                internal = sid[4:]
            else:
                # fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
                internal = sid.lstrip('-')
            return f"https://t.me/c/{internal}/{msg_id}"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞
        start_position = None
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ID -> TEXT -> POSITION)
        if 'START_FROM_MESSAGE_ID' in globals() and START_FROM_MESSAGE_ID:
            # –ù—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —ç—Ç–æ–≥–æ ID –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            print(f"üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å ID —Å–æ–æ–±—â–µ–Ω–∏—è: {START_FROM_MESSAGE_ID}")
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID (–∏–ª–∏ –¥–æ –ª–∏–º–∏—Ç–∞) ‚Äî –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            ids = []
            async for m in client.iter_messages(source, limit=None):
                ids.append(m.id)
            ids.reverse()  # —Ç–µ–ø–µ—Ä—å –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
            try:
                index = ids.index(START_FROM_MESSAGE_ID)
                start_position = index + 1  # –ø–æ–∑–∏—Ü–∏—è –Ω–∞—á–∏–Ω–∞—è —Å 1
                print(f"‚úÖ ID –Ω–∞–π–¥–µ–Ω. –ü–æ–∑–∏—Ü–∏—è: {start_position}")
            except ValueError:
                print("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞")
        elif RESUME_FROM_TEXT:
            print(f"üîç –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É...")
            found_position, found_message = await find_message_by_text(client, source, RESUME_FROM_TEXT)
            if found_position:
                start_position = found_position
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ! –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏: {start_position} (ID={found_message.id})")
            else:
                print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞")
        elif SKIP_TO_POSITION:
            start_position = SKIP_TO_POSITION
            print(f"üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏: {start_position}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        count = 0
        skipped = 0
        media_downloaded = 0
        start_time = time.time()
        current_position = 0
        
        # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        if DEMO_LIMIT >= total_messages:
            process_limit = total_messages
            print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ü–û–õ–ù–û–ï –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞!")
            if start_position:
                print(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {total_messages - start_position + 1} (—Å –ø–æ–∑–∏—Ü–∏–∏ {start_position})")
            else:
                print(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {total_messages}")
        else:
            process_limit = DEMO_LIMIT
            print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {DEMO_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π...")

        print("=" * 60)

        async for message in client.iter_messages(source, reverse=True):
            current_position += 1
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if start_position and current_position < start_position:
                if current_position % 100 == 0:
                    print(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ –ø–æ–∑–∏—Ü–∏–∏ {start_position}: {current_position}/{start_position}")
                continue
            
            try:
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
                if DEMO_LIMIT < total_messages and count >= DEMO_LIMIT:
                    break
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if SKIP_EMPTY_MESSAGES and not message.text and not message.media:
                    skipped += 1
                    continue
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if DEMO_MODE:
                    # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                    success = True
                    media_file = None
                    if message.media:
                        media_file = "demo_media_file"
                        media_downloaded += 1
                else:
                    # –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
                    success, media_file = await copy_message_with_media(
                        client, message, target, media_folder
                    )
                
                if success:
                    count += 1
                    if media_file and not DEMO_MODE:
                        media_downloaded += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    log_message_info(logger, message, count, total_messages)

                    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        source_link = build_source_message_link(source.id, message.id)
                        with open(progress_file_path, 'a', encoding='utf-8') as pf:
                            # –§–æ—Ä–º–∞—Ç: –ø–æ—Ä—è–¥–∫–æ–≤—ã–π_–Ω–æ–º–µ—Ä\tID_—Å–æ–æ–±—â–µ–Ω–∏—è\t–°—Å—ã–ª–∫–∞\n
                            pf.write(f"{count}\t{message.id}\t{source_link}\n")
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–∏—à–µ–º –≤ –ª–æ–≥ —Ä–∞–∑ –≤ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                        if count % 100 == 0:
                            logger.info(f"–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {count} —Å—Å—ã–ª–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è: {source_link}")
                    except Exception as autosave_err:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (—Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}): {autosave_err}")
                    
                    # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if count % 100 == 0:
                        elapsed_time = time.time() - start_time
                        logger.info(f"üéØ –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ô –û–¢–ß–ï–¢: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {elapsed_time:.1f}—Å")
                        print(f"\nüéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                    progress = (count / process_limit) * 100 if process_limit > 0 else 0
                    elapsed_time = time.time() - start_time
                    
                    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    if count > 0:
                        avg_time_per_message = elapsed_time / count
                        remaining_messages = process_limit - count
                        eta_seconds = remaining_messages * avg_time_per_message
                        eta_minutes = eta_seconds / 60
                        eta_hours = eta_minutes / 60
                        
                        if eta_hours >= 1:
                            eta_text = f"{eta_hours:.1f}—á"
                        elif eta_minutes >= 1:
                            eta_text = f"{eta_minutes:.1f}–º"
                        else:
                            eta_text = f"{eta_seconds:.0f}—Å"
                    else:
                        eta_text = "‚àû"
                    
                    mode_text = "–ö–û–ü–ò–†–û–í–ê–ù–ò–ï" if not DEMO_MODE else "–ê–ù–ê–õ–ò–ó"
                    print(f"üìã {mode_text}: {count}/{process_limit} ({progress:.1f}%) | "
                          f"–ú–µ–¥–∏–∞: {media_downloaded} | –í—Ä–µ–º—è: {elapsed_time:.0f}—Å | ETA: {eta_text}", end='\r')
                else:
                    skipped += 1
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{count + skipped}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–º–µ–Ω—å—à–µ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ)
                delay = 0.1 if DEMO_MODE else DELAY_BETWEEN_MESSAGES
                await asyncio.sleep(delay)
                
            except FloodWaitError as e:
                print(f"\n‚è≥ –§–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥...")
                logger.warning(f"–§–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å: –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.seconds)
                continue
                
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                skipped += 1
                await asyncio.sleep(1)
                continue

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        print(f"\n\nüéâ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("=" * 50)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count}")
        print(f"üìé –°–∫–∞—á–∞–Ω–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {media_downloaded}")
        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {skipped}")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÅ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {media_folder}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        log_final_stats(logger, count, skipped, media_downloaded, total_time, media_folder)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if 'logger' in locals():
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()
        print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Telegram")
        if 'logger' in locals():
            logger.info("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Telegram")


# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    asyncio.run(main())