import asyncio
from telethon import TelegramClient
from config import API_ID, API_HASH, PHONE, TARGET_CHANNEL

async def check_recent_messages():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
    """
    client = TelegramClient('cloner_session', API_ID, API_HASH)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Å–µ—Å—Å–∏—é
    
    try:
        await client.start(phone=PHONE)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram")
        
        target = await client.get_entity(TARGET_CHANNEL)
        print(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: {target.title}")
        print(f"üÜî ID: {target.id}")
        
        print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ:")
        print("=" * 50)
        
        count = 0
        async for message in client.iter_messages(target, limit=10):
            count += 1
            if message.text:
                text_preview = message.text[:100] + "..." if len(message.text) > 100 else message.text
                print(f"{count}. ID:{message.id} | {text_preview}")
            else:
                print(f"{count}. ID:{message.id} | [–ú–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]")
        
        if count == 0:
            print("‚ùå –í –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()

if __name__ == '__main__':
    asyncio.run(check_recent_messages())
